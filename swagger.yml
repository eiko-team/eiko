openapi: 3.0.0
info:
  version: 1.0.1
  title: Eiko's API
  description: Aiko's API
security:
  - accessCode:
      - read
      - write
servers:
  - url: 'https://eiko-app.com/api'
components:
  responses:
    Error: # $ref: '#/components/responses/Error'
      description: An error occured, please check response body's code
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Token: # $ref: '#/components/schemas/Token'
      type: object
      properties:
        token:
          type: string
    Error: # $ref: '#/components/schemas/Error'
      type: object
      properties:
        error:
          type: string
    Query: # $ref: '#/components/schemas/Query'
      type: object
      properties:
        Query:
          type: string
        Limit:
          type: integer
        Size:
          type: integer
          format: uint64
        Latitude:
          type: number
          format: double
        Longitude:
          type: number
          format: double
    List: # $ref: '#/components/schemas/List'
      type: object
      properties:
        ID:
          type: integer
          format: uint64
        Name:
          type: string
    ConsumableID: # $ref: '#/components/schemas/ConsumableID'
      type: object
      properties:
        ConsumableID:
          type: integer
          format: uint64
        StoreID:
          type: integer
          format: uint64
        StockID:
          type: integer
          format: uint64
    ListContent: # $ref: '#/components/schemas/ListContent'
      type: object
      properties:
        ID:
          type: integer
          format: uint64
        ListID:
          type: integer
          format: uint64
        Consumable:
          $ref: '#/components/schemas/ConsumableID'
        Name:
          type: string
        Done:
          type: boolean
        Erased:
          type: boolean
        Mode:
          type: string
          pattern: '^(sample|consumable|personnal)$'
    Consumable: # $ref: '#/components/schemas/Consumable'
      type: object
      properties:
        ID:
          type: integer
          format: int64
        Name:
          type: string
        Compagny:
          type: string
        Manufacturing:
          type: string
        Created:
          type: date-time
        Creator:
          type: integer
          format: int64
        NewVersion:
          type: integer
          format: int64
        Source:
          type: string
        Code:
          type: array
          items:
            type: string
        Categories:
          type: array
          items:
            type: string
        Tags:
          type: array
          items:
            type: string
        Packaging:
          type: array
          items:
            type: string
        Fat:
          type: number
          format: double
        Fiber:
          type: number
          format: double
        Glucides:
          type: number
          format: double
        Proteins:
          type: number
          format: double
        Sodium:
          type: number
          format: double
        SaturatedFat:
          type: number
          format: double
        SugarGlucides:
          type: number
          format: double
        Energy:
          type: number
          format: double
        Alcool:
          type: number
          format: double
        Additive:
          type: array
          items:
            type: string
        Ingredient:
          type: array
          items:
            type: string
        Vitamins:
          type: array
          items:
            type: string
        Allergen:
          type: array
          items:
            type: string
        Nutriscore:
          type: string
        Back:
          type: string
        Composition:
          type: string
        Front:
          type: string
        Grammes:
          type: integer
        MLitre:
          type: integer
        Label:
          type: array
          items:
            type: string

paths:
  /register:
    post:
      summary: User registration
      description: Provide a token and create a user with the given credentials
      responses:
        '200':
          description: Here is your token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                user_password:
                  type: string
  /login:
    post:
      summary: User login
      description: Provide a token with the given credentials
      responses:
        '200':
          description: Here is your token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
                user_password:
                  type: string
  /delete:
    post:
      summary: User detetion
      description: Completely removes a user
      responses:
        '200':
          description: OK
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - user
      parameters:
        - in: cookie
          name: token
          schema:
            type: string
  /updatetoken:
    post:
      summary: Update a token
      description: Update a token
      responses:
        '200':
          description: Token updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - user
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /verify/email:
    post:
      summary: Checks if the email is available
      description: >
        Checks if the email is available to use as a email for the
        account to be created
      responses:
        '200':
          description: Available
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: string
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - verify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_email:
                  type: string
  /verify/password:
    post:
      summary: Checks the password strength
      description: >
        Return the strength of the provided password, from 0 to 4.
        Checks the length of the password, and it's content:
        if it contains [a-z], it is a start.
        if it contains [A-Z], it is a greater start.
        if it contains ([\x21-\x2F]|[\x3A-\x40]) (!"#$%&'()*+,-./ || :;<=>?@), it is a good.
        if it contains ([\x5B-\x60]|[\x7B-\x7E]) ([\]^_` || {|}~), it is a strong password.
      responses:
        '200':
          description: Available
          content:
            application/json:
              schema:
                type: object
                properties:
                  strength:
                    type: integer
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - verify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
  /log:
    post:
      summary: Do some logs
      description: >
        Add a new log if the storage solution
      responses:
        '200':
          description: The logging was successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: string
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - global
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      parameters:
        - in: cookie
          required: false
          name: token
          schema:
            type: string
  /store/add:
    post:
      summary: Create a new store
      description: >
        Create a new store on call
      responses:
        '200':
          description: The creation was successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: string
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                country:
                  type: string
                zip:
                  type: string
                user_rating:
                  type: integer
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /store/get:
    post:
      summary: Get a store
      description: >
        Get a store informations with given informations
      responses:
        '200':
          description: Informations on the store
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                  address:
                    type: string
                  country:
                    type: string
                  zip:
                    type: string
                  user_rating:
                    type: integer
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                country:
                  type: string
                zip:
                  type: string
                user_rating:
                  type: integer
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /store/update:
    post:
      summary: Update a store value
      description: >
        Update store value, like renaming or adresss changes.
      responses:
        '200':
          description: Informations on the store
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: boolean
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                country:
                  type: string
                zip:
                  type: string
                user_rating:
                  type: integer
                ID:
                  type: integer
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /store/delete:
    post:
      summary: Delete store
      description: >
        Delete a Store and all related values.
      responses:
        '200':
          description: Informations on the store
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: boolean
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ID:
                  type: integer
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /store/score:
    post:
      summary: Add A score to a store
      description: >
        Add a new score to the store
      responses:
        '200':
          description: Informations on the store
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: boolean
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - store
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_rating:
                  type: integer
                ID:
                  type: integer
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /consumable/add:
    post:
      summary: Create a new consumable
      description: >
        Create and store a new consumable and return the id of this consumable
      responses:
        '200':
          description: The ID of the consumable
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: boolean
                  id:
                    type: integer
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - consumable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumable'
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /consumable/get:
    post:
      summary: Fetch some consumable
      description: >
        Fetch information about some consumable
      responses:
        '200':
          description: Consumables
          content:
            application/json:
              schema:
                type: object
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Consumable'
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - consumable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /list/create:
    post:
      summary: Create a new list
      description: >
        Create a new list and return it's ID
      responses:
        '200':
          description: The ID of the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /list/getall:
    post:
      summary: Fetch all user's list
      description: >
        Fetch the user's list
      responses:
        '200':
          description: Consumables
          content:
            application/json:
              schema:
                type: object
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/List'
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - list
      requestBody:
        required: false
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /list/getcontent:
    post:
      summary: Fetch the content of a list
      description: >
        Fetch the content of a list
      responses:
        '200':
          description: Consumables
          content:
            application/json:
              schema:
                type: object
                properties:
                  type: array
                  items:
                    $ref: '#/components/schemas/ListContent'
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /list/add/personnal:
    post:
      summary: Add a personnal content to a list
      description: >
        Add a personnal content to a list
      responses:
        '200':
          description: Consumables
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: boolean
                  id:
                    type: integer
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListContent'
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
  /list/add/consumable:
      summary: Add a personnal content to a list
      description: >
        Add a personnal content to a list
      responses:
        '200':
          description: Consumables
          content:
            application/json:
              schema:
                type: object
                properties:
                  done:
                    type: boolean
                  id:
                    type: integer
        '500':
          $ref: '#/components/responses/Error'
      tags:
        - list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListContent'
      parameters:
        - in: cookie
          name: token
          description: The user's token
          required: true
          schema:
            type: string
